import "bootstrap/dist/css/bootstrap.min.css";

type games = {
  id: string;
  title: string;
  img: string;
  description: string;
  releaseYear?: number;
};

let games: games[] = [];

document.addEventListener('DOMContentLoaded', () => {
  const cardContainer = document.querySelector('#content') as HTMLElement | null;
  const addGameForm = document.getElementById('addGameForm') as HTMLFormElement | null;
  const sortDropdown = document.getElementById('sortDropdown') as HTMLSelectElement | null;
  const apiUrl = 'http://localhost:3000/games';

  if (!cardContainer || !addGameForm || !sortDropdown) {
    console.error("One or more elements were not found in the DOM.");
    return;
  }

  // Fetch and display games when the page loads
  getGames();

  // Handle sorting
  sortDropdown.addEventListener('change', () => {
    const sortBy = sortDropdown.value;
    getGames(sortBy);
  });

  // Fetch and display games
  async function getGames(sortBy = 'title') {
    try {
      const response = await fetch(apiUrl);
      let games: games[] = await response.json();
      games = sortGames(games, sortBy);
      displayGames(games);
    } catch (error) {
      console.error('Error fetching games:', error);
    }
  }

  // Sort games by title or release year
  function sortGames(games: games[], sortBy: string): games[] {
    return games.sort((a, b) => {
      if (sortBy === 'title') {
        return a.title.localeCompare(b.title);
      } else if (sortBy === 'releaseYear' && a.releaseYear && b.releaseYear) {
        return a.releaseYear - b.releaseYear;
      }
      return 0; // Default case
    });
  }

  // Display games as cards
  function displayGames(games: games[]) {
    if (!cardContainer) return; // Prevents using null
  
    cardContainer.innerHTML = '';
    games.forEach((game) => {
      const card = document.createElement('div');
      card.classList.add('card', 'bg-secondary', 'text-white', 'm-2');
      card.style.width = '18rem';
      card.innerHTML = `
        <img src="${game.img || 'https://via.placeholder.com/150'}" class="card-img-top" alt="${game.title}">
        <div class="card-body">
          <h5 class="card-title">${game.title}</h5>
          <p class="card-text">${game.description}</p>
          <button class="btn btn-danger" data-id="${game.id}">Delete</button>
        </div>
      `;
  
      const deleteButton = card.querySelector('.btn-danger');
      if (deleteButton) {
        deleteButton.addEventListener('click', () => deleteGame(game.id));
      }
  
      cardContainer.appendChild(card);
    });
  }
  
  

  // Handle form submission to add a new game
  addGameForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const newGame: games = {
      id: "", // ID will be auto-generated by the server
      title: (document.getElementById('addGameTitle') as HTMLInputElement).value,
      img: (document.getElementById('addGameImg') as HTMLInputElement).value,
      description: (document.getElementById('addGameDescription') as HTMLInputElement).value,
    };

    await addGame(newGame);
    addGameForm.reset(); // Proper way to reset a form
    getGames(); // Refresh the game list
  });

  // Add a new game to the server
  async function addGame(newGame: games) {
    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newGame),
      });

      const addedGame = await response.json();
      console.log('Game added with auto-generated ID:', addedGame);
    } catch (error) {
      console.error('Error adding new game:', error);
    }
  }

  // Delete a game by ID
  async function deleteGame(id: string) {
    console.log(`DELETE request for: ${apiUrl}/${id}`);
    try {
      const response = await fetch(`${apiUrl}/${id}`, { method: 'DELETE' });

      if (response.status === 404) {
        console.error(`Game with ID ${id} not found.`);
        return;
      }

      if (response.ok) {
        console.log(`Game with ID ${id} deleted successfully.`);
        getGames(); // Refresh the game list
      } else {
        console.error(`Failed to delete game with ID ${id}. Status: ${response.status}`);
      }
    } catch (error) {
      console.error('Error deleting game:', error);
    }
  }
});
